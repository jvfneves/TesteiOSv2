//
//  CurrencyViewController.swift
//  TesteiOSv2-VitorNeves
//
//  Created by joao.vitor.f.naves on 04/03/2019.
//  Copyright (c) 2019 joao.vitor.f.naves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyDisplayLogic: class
{
    func displayStatements(_ viewModel: Currency.Response)
}

class CurrencyViewController: UIViewController, CurrencyDisplayLogic
{
    var interactor: CurrencyBusinessLogic?
    var router: (NSObjectProtocol & CurrencyRoutingLogic & CurrencyDataPassing)?

    // MARK: - Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: - Setup
  
    private func setup()
    {
        let viewController = self
        let interactor = CurrencyInteractor()
        let presenter = CurrencyPresenter()
        let router = CurrencyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: - Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: - View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.showHUD()
        self.setTableView()
        self.mostrarUsuario()
        self.fetchStatements()
    }
  
    // MARK: - Do something
  
    @IBOutlet weak var nameUserLabel: UILabel!
    @IBOutlet weak var numberAccountLAbel: UILabel!
    @IBOutlet weak var balanceUserLabel: UILabel!
    @IBOutlet weak var currencyTableView: UITableView!
    var list_statements: NSMutableArray = NSMutableArray()
    
    func setTableView(){
        // MARK: - TableView
        
        currencyTableView.delegate = self
        currencyTableView.dataSource = self
        currencyTableView.separatorStyle = .none
        
        currencyTableView.register(UINib(nibName: "CurrencyHeaderTableViewCell", bundle: nil), forCellReuseIdentifier: "CurrencyHeaderTableViewCell")
        currencyTableView.register(UINib(nibName: "CurrencyTableViewCell", bundle: nil), forCellReuseIdentifier: "CurrencyTableViewCell")
    }
    
    func mostrarUsuario() {
        let user = self.interactor!.getUserAccount()
        self.nameUserLabel.text = user?.name
        self.numberAccountLAbel.text = "\(user?.bankAccount ?? "") / \(user?.agency.maskAgency() ?? "")"
        self.balanceUserLabel.text = String(format: "R$ %.02f", locale: Locale.current, arguments: [user!.balance])
    }
    
    func fetchStatements() {
        var request = Currency.Request()
        request.userId = self.interactor!.getUserAccount()?.userId ?? 0
        interactor?.fetchStatements(request: request)
    }
    
    func displayStatements(_ viewModel: Currency.Response) {
        self.dismissHUD()
        if let statements = viewModel.statements {
            self.list_statements = statements as! NSMutableArray
            self.currencyTableView.reloadData()
        }
    }
    
    //MARK: - Actions
    
    @IBAction func logoutAction(_ sender: UIButton) {
        router?.goToLogin()
    }
}

//MARK: - UITableViewDelegate/UITableViewDataSource

extension CurrencyViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.list_statements.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CurrencyTableViewCell", for: indexPath) as! CurrencyTableViewCell
        let statement = list_statements.object(at: indexPath.row) as! Currency.Statement
        cell.statement = statement
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CurrencyHeaderTableViewCell") as! CurrencyHeaderTableViewCell
        cell.titleHeaderLabel.text = "Recentes"
        return cell
    }
}
